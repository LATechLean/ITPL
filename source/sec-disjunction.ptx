<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-disjunction" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Disjunction</title>

  <introduction>
    <p>
      Lean's disjunction comes equipped with two <term>Introduction Rules</term> <mdash/> one for the left and one for the right.
      <ul>
	<li>
	  <p>
	    The left introduction rule, <c>Or.inl</c>, constructs a term of type <c>p ∨ q</c> from a term of type <c>p</c>.
	  </p>
	</li>
	<li>
	  <p>
	    The right introduction rule, <c>Or.inl</c>, constructs a term of type <c>p ∨ q</c> from a  term of type <c>q</c>.
	  </p>
	</li>
      </ul>
    </p>

    <p>
      The disjunction also comes with an <term>Elimination Rule</term>, <c>Or.elim</c>, which allows us to use a term of type <c>p ∨ q</c> to complete a proof by cases.
      The elmination rule takes two arguments
      <ul>
	<li>
	  <p>a proof term of the form <c>λ h_p : p ↦ ...</c>, and</p>
	</li>
	<li>
	  <p>a proof term of the form <c>λ h_q : q ↦ ...</c></p>
	</li>
      </ul>
    </p>
  </introduction>

  <subsection xml:id="subsec-disjunction_truth_table">
    <title>Formalizing the Disjunction Truth Table</title>
    <p>
      To demonstrate the introduction and elimination rules, we construct the rows of the truth table for <m>p \vee q</m>.
    </p>

    <table>
      <title>Truth table for disjunction</title>
      <tabular halign="center">
	<row bottom="medium">
	  <cell right="medium">
            <m>p</m>
	  </cell>
	  <cell right="medium">
            <m>q</m>
	  </cell>
	  <cell>
            <m>p \vee q</m>
	  </cell>
	</row>
	<row>
	  <cell right="medium">
            True
	  </cell>
	  <cell right="medium">
            True
	  </cell>
	  <cell>
            True
	  </cell>
	</row>
	<row>
	  <cell right="medium">
            True
	  </cell>
	  <cell right="medium">
            False
	  </cell>
	  <cell>
	    True
	  </cell>
	</row>
	<row>
	  <cell right="medium">
            False
	  </cell>
	  <cell right="medium">
            True
	  </cell>
	  <cell>
            True
	  </cell>
	</row>
	<row>
	  <cell right="medium">
            False
	  </cell>
	  <cell right="medium">
            False
	  </cell>
	  <cell>
	    False
	  </cell>
	</row>
      </tabular>
    </table>

    <example>
      <title>Row One</title>
      
      <p>
	For the first row, we can choose to use either the left or right introduction rule since either one will a term of type <c>p ∨ q</c>.
      </p>

      <program language="lean">
	<code>
	  variable (p q : Prop)
	  example (h_p : p) (h_q : q): p ∨ q := Or.inl h_p
	  example (h_p : p) (h_q : q): p ∨ q := Or.inr h_q
	</code>
      </program>
    </example>

    <example>
      <title>Second Row</title>
      
      <p>
	We use the right introduction rule to construct <c>p ∨ q</c> from <c>q</c>.
      </p>

      <program language="lean">
	<code>
	  variable (p q : Prop)
	  example (h_p : p) (h_nq : ¬q) : p ∨ q := Or.inl h_p
	</code>
      </program>
    </example>

    <example>
      <title>Row Three</title>
      
      <p>
	We use the left introduction rule to construct <c>p ∨ q</c> from <c>p</c>.
      </p>

      <program language="lean">
	<code>
	  variable (p q : Prop)
	  example (h_np : ¬p) (h_q : q) : p ∨ q := Or.inr h_q
	</code>
      </program>
    </example>

    <remark>
      <p>
	As above, there is no need to carry the extra hypotheses.
      </p>

      <program language="lean">
	<code>
	  example (p q : Prop) (h_p : p) : p ∨ q := Or.inl h_p
	  example (p q : Prop) (h_q : q): p ∨ q := Or.inr h_q
	  example (p q : Prop) (h_p : p) : p ∨ q := Or.inl h_p
	  example (p q : Prop) (h_q : q) : p ∨ q := Or.inr h_q
	</code>
      </program>
    </remark>


    <example>
      <title>Row Four</title>
      <p>
	The final row is requires that we construct a term of type <c>¬(p ∨ q)</c>, which we recall is equivalent to <c>p ∨ q → False</c>.
	This says it is sufficient to derive a contradiction from the hypotheses
	<ul>
	  <li>
	    <p>
	      <c>h_np : ¬p</c>,
	    </p>
	  </li>
	  <li>
	    <p>
	      <c>h_nq : ¬q</c>, and
	    </p>
	  </li>
	  <li>
	    <p>
	      <c>h_pq : p ∨ q.</c>
	    </p>
	  </li>
	</ul>
	The argument proceeds in cases.
	It may be helpful to first write the informal argument, then construct the formal proof from it.
      </p>

      <p>
	<alert>Proof:</alert>
	Assume <m>p</m> and <m>q</m> are both false.
	Suppose for contradiction that <m>p \vee q</m> is true.
	By definition, one of two cases must hold:
	<dl>
	  <li>
	    <title>Case 1</title>
	    <p>
	      <m>p</m> is true; this contradicts the assumption that <m>p</m> is false.
	    </p>
	  </li>
	  <li>
	    <title>Case 2</title>
	    <p>
	      <m>q</m> is true; this contradicts the assumption that q is false.
	    </p>
	  </li>
	</dl>
	Hence assuming <m>p \vee q</m> leads to a contradiction.
	Therefore <m>¬(p ∨ q)</m>. <m>\blacksquare</m>
      </p>

      <p>
	To formalize this proof, we first translate the pieces into the relevant commands.
      <ol>
	<li>
	  <p>
	    The assumption that <m>p \vee q</m> is true is a proof term of the form
	    <cd>λ h_pq : p ∨ q ↦ ...</cd>
	  </p>
	</li>
	<li>
	  <p>
	    We split the assumption <m>p ∨ q</m> into two cases using the elimination rule
	    <cd>Or.elim h_pq (Case 1) (Case 2)</cd>
	    <dl>
	      <li>
		<title>Case 1</title>
		<p>
		  Assume <m>p</m> is true and arrive at a contradiction using the assumption that <m>p</m> is false.
		  Hence this case corresponds to a proof term of the form
		  <cd>λ h_p : p ↦ h_np p</cd>
		</p>
	      </li>
	      <li>
		<title>Case 2</title>
		<p>
		  Assume <m>q</m> is true and arrive at a contradiction using the assumption that <m>q</m> is false.
		  Hence this case corresponds to a proof term of the form
		  <cd>λ h_q : q ↦ h_nq h_q</cd>
		</p>
	      </li>
	    </dl>
	  </p>
	</li>
	<li>
	  <p>
	    Assemble the pieces into a single function.
	  </p>
	</li>
      </ol>
      This results in the following formal Lean proof.
      </p>

      <program language="lean">
	<code>
	  variable (p q : Prop)
	  example (h_np: ¬p) (h_nq: ¬q) : ¬(p ∨ q) :=
	  -- Assume p ∨ q.
	  (λ h_pq : p ∨ q ↦ Or.elim h_pq  -- Break into cases
	  (λ h_p : p ↦ h_np h_p) -- Case 1
	  (λ h_q : q ↦ h_nq h_q)) -- Case 2
	</code>
      </program>
    </example>
  </subsection>
</section>
